<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Just Some More Devs Ideas]]></title>
  <link href="http://ezilocchi.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://ezilocchi.github.io/"/>
  <updated>2015-06-11T11:53:46-03:00</updated>
  <id>http://ezilocchi.github.io/</id>
  <author>
    <name><![CDATA[Emiliano Zilocchi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Managing Sidekiq With Upstart]]></title>
    <link href="http://ezilocchi.github.io/managing-sidekiq-with-upstart/"/>
    <updated>2014-10-10T15:47:53-03:00</updated>
    <id>http://ezilocchi.github.io/managing-sidekiq-with-upstart</id>
    <content type="html"><![CDATA[<p>This post has started as a research on <strong>How to start Sidekiq on a system reboot</strong>. After read blogs and try different approaches we ended with Upstart, that is the new way of managing jobs on the Ubuntu platform (Actually not so new, it was included on the standard releases since 10.04 I think). With it you basically define a standard <strong>Ubuntu Job</strong> and then you can just:</p>

<p><code>
sudo service sidekiq [start | stop | restart | status]
</code></p>

<p>We have a quite standard Rails stack that involves:</p>

<ul>
<li><strong>Ubuntu 12.04</strong> LTS</li>
<li><strong>Sidekiq</strong> with <strong>Redis</strong></li>
<li><a href="http://rvm.io/">RVM</a> to manage our ruby versions (with <a href="https://github.com/sstephenson/rbenv">rbenv</a> you can use the <a href="https://github.com/mperham/sidekiq/tree/master/examples/upstart">example</a> on the official sidekiq github repo)</li>
<li><strong>Capistrano</strong> for deploying the application</li>
</ul>


<!-- more -->


<p>The only thing to do in order to get your new job up and running, it&rsquo;s create a conf file under <code>/etc/init</code> directory. The file name will be the job name that you will <code>[start | stop | restart | status]</code> later.</p>

<p>The structure of this file must follow the Upstart DSL (you can see different example on <code>/etc/init</code> directory and on the <a href="http://upstart.ubuntu.com/cookbook/">official documentation</a>).</p>

<p>For our purpose we are going to create a file <code>/etc/init/sidekiq.conf</code> so you can run <code>sudo service sidekiq [start | stop | restart | status]</code> and at the same time we can tell Upstart that it should start everytime the <strong>system boot</strong>.</p>

<p>On my case I used this <a href="https://github.com/mperham/sidekiq/tree/master/examples/upstart">example</a> as a starting point adapting it to RVM (note that it uses <strong>rbenv</strong>). On the other hand this script was not thought to start sidekiq when the <strong>OS is booted</strong> but that is a quite simple thing, just add <code>start on startup</code></p>

<p>```bash /etc/init/sidekiq.conf</p>

<h1>Just a custom description for our Job</h1>

<p>description &ldquo;Sidekiq Background Worker&rdquo;</p>

<h1>On which conditions the job should start. In this case it&rsquo;s very simple: On the system startup (this is basically when the system is booted)</h1>

<p>start on startup</p>

<h1>On which conditions the job should stop. In this case when the system reboot (<a href="http://upstart.ubuntu.com/cookbook/#runlevels">http://upstart.ubuntu.com/cookbook/#runlevels</a>)</h1>

<p>stop on runlevel [06]</p>

<h1>This are the User and User Group that will be used to run the Job. On our case it should be the user that we have set on our capistrano script for instance.</h1>

<h1>You can check at <code>config/deploy/&lt;environment&gt;.rb</code> on this line <code>server &lt;some_ip_addreess&gt;, user: &lt;deploy_user&gt;</code></h1>

<p>setuid deploy_user
setgid deploy_group</p>

<h1>This indicate that we want to restart the Job if it crashes</h1>

<p>respawn
respawn limit 3 30</p>

<h1>TERM is sent by sidekiqctl when stopping sidekiq.  Without declaring these as normal exit codes, it just respawns.</h1>

<p>normal exit 0 TERM</p>

<p>script</p>

<h1>this script runs in /bin/sh by default</h1>

<h1>respawn as bash so we can source in RVM</h1>

<p>exec /bin/bash &lt;<EOT
  # use syslog for logging
  exec &> /dev/kmsg</p>

<p>  # Jump into the capistrano deployment directory
  cd /var/projects/&lt;YOUR_PROJECT_DIR>/current</p>

<p>  # Start Sidekiq through RVM. Note that I&rsquo;m using the standard Capistrano paths
  exec ~/.rvm/bin/rvm-shell -c &lsquo;bundle exec sidekiq &mdash;index 0 &mdash;environment <environemnt> &mdash;logfile /var/projects/&lt;YOUR_PROJECT_DIR>/current/log/sidekiq.log&rsquo;
EOT
end script
```</p>

<p>One more thing that might be helpful is how to debug this in case it doesn&rsquo;t work on the first try or if you need to adapt it. Well you can just
<code>tail -f /var/log/syslog</code> and see the errors.</p>

<p>That is pritty much it, now your Sidekiq process is being managed as a standard Ubuntu Job.</p>

<p>Resources:</p>

<ul>
<li><a href="https://github.com/mperham/sidekiq/tree/master/examples/upstart">https://github.com/mperham/sidekiq/tree/master/examples/upstart</a></li>
<li><a href="http://upstart.ubuntu.com/getting-started.html">http://upstart.ubuntu.com/getting-started.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With Puppet and Rails]]></title>
    <link href="http://ezilocchi.github.io/getting-started-with-puppet-and-rails/"/>
    <updated>2013-12-23T20:51:04-03:00</updated>
    <id>http://ezilocchi.github.io/getting-started-with-puppet-and-rails</id>
    <content type="html"><![CDATA[<p>This is just an example project showing how to get a <strong>Ruby on Rails</strong> environment up and running with just one command line using <strong>Puppet</strong>. It was original created for (but it can be easily modified to run with other setups):</p>

<ul>
<li><strong>Ubuntu</strong> 13.10 (since it’s one of the most supported distros in the linux community)</li>
<li><strong>Rbenv</strong> as Ruby manager (there is no way of developing ruby without a Ruby Version Manager. You can user RVM as well)</li>
<li><strong>Postgresql</strong> (since it’s 100% open source and it’s the <em><a href="http://www.heroku.com" target="_blank">heroku</a></em> default)</li>
<li><strong>VIM</strong> (with <em><a href="https://github.com/carlhuda/janus" target="_blank">janus</a></em> distribution)</li>
<li><strong>Nodejs</strong> (since it’s the most popular and stable JS engine)</li>
<li><strong>Git</strong> (it doesn’t need any explanation)</li>
</ul>


<p>Any contribution to improve it (like proposing a better way of writing the config) or add more features (like supporting others linux distributions) is very welcomed :).</p>

<p>So basically you can run this command from your terminal:</p>

<p><code>
sudo curl https://raw.github.com/ezilocchi/my-puppet-conf/master/install.sh | bash
</code></p>

<p>or you can go to the <a href="http://github.com/ezilocchi/my-puppet-conf">github repo</a> and see how it works</p>

<!-- more -->


<h2>Long story</h2>

<p>During the last 6 month I had to set the development environment in my laptop 3 times. First I got a new job as freelance developer and I had to follow a step by step document to convert my machine into a full developer workstation. Then my hard drive broke and I had to set everything again, following every little step, running every command from the console. Finally I got a new laptop, an amazing Dell XPS, and guess what I went to that setup document one more time. Actually the story doesn’t end there, some months later two other devs joined the project and they were able to run this command instead of follow the whole document. At some point this  became something useful</p>

<p>So my first attempt was to create a shell script, something that you can run from the console and automatically sets everything. But then I remembered puppet, I used it in a project but I’ve never configured it by my own (only run <code>puppet agent</code>). Usually devops are who handle this kind of things, not developers.</p>

<p>This is just a puppet config that I created as a self learning project that has grown with the time and helps other devs on this project to set up their own environments.</p>

<p>IMPORTANT: The final purpose of puppet it’s much larger than this. The idea it’s to stay in sync all your <strong>environments (demo, stage, prod, etc…)</strong> and avoid any kind of configuration issues during deployment, among other things. But as I mentioned before this started as a learning experience but ends up in something useful for this project.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started Rails 4 With Mongodb]]></title>
    <link href="http://ezilocchi.github.io/getting-started-rails-4-with-mongodb/"/>
    <updated>2013-04-26T09:49:31-03:00</updated>
    <id>http://ezilocchi.github.io/getting-started-rails-4-with-mongodb</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>The idea is to create a Ruby on Rails application  from scratch, that
connects with MongoDB. The gems involve are:</p>

<ul>
<li><strong>MongoID</strong>:  To integrate Rails and MongoDB</li>
<li><strong>Slim</strong>: An alternative template engine to ERB (the Rails default one).</li>
<li><strong>Rspec</strong>: A BDD gem to express the tests as specifications</li>
<li><strong>Cucumber</strong>: A BBD gem to express the acceptance tests in Gherkin Syntax</li>
</ul>


<p>NOTE: You can find the source code for this tutorial <a href="https://github.com/ezilocchi/rails_with_mongo_example">here</a></p>

<p>Technology Stack: <strong>MongoDB</strong>, <strong>Ruby</strong>, <strong>Rails</strong>, <strong>GIT (Optional)</strong>, <strong>VIM (Optional)</strong></p>

<!-- more -->


<h2>Create a rails app without active record and test unit </h2>

<p>Since we are using MongoDB, a NoSQL database, we don’t need ActiveRecord, so we can use the option <code>--skip-active-record</code> in order to avoid the creation of all the files and configuration related.</p>

<p>In the same way, we want to use Rspec and Cucumber for automation testing, so we can omit the Unit Test installation as well with the option <code>--skip-test-unit</code>.</p>

<p><code>
rails new myapp --skip-active-record --skip-test-unit
</code></p>

<h2>Installing MongoID gem</h2>

<p>Open the Gemfile and add the dependency <code>gem “mongoid”</code> and then run <code>bundle install</code>.</p>

<p>Finally run
<code>
rails generate mongoid:config
</code></p>

<p>Now any time that you run a generate command that involves models creation it will invoke MongoID instead of ActiveRecord.</p>

<p>NOTE: At the time of writing this blog the lastest release for MongoID (3.0.5) is not compatible with Rails 4, so you have to use the master version instead:
<code>
+  gem 'mongoid', git: 'git://github.com/mongoid/mongoid.git'
</code></p>

<h2>Installing Slim gem</h2>

<p>Open the Gemfile and add the gem dependency: <code>gem “slim-rails”</code> and run <code>bundle install</code>.</p>

<p>Now any time that you run a generate command that involves template creation it will use Slim instead of ERB.</p>

<h2>Installing Rspec gem</h2>

<p>One more time we add the dependency:</p>

<p><code>
+  group :test do
+    gem "rspec-rails"
+  end
</code>
And then run:</p>

<p><code>
rails generate rspec:install
</code></p>

<p>Since we are using MongoID and not ActiveRecord, you need to comment these two lines from spec/spec_helper.rb:
```</p>

<h1>Remove this line if you&rsquo;re not using ActiveRecord or ActiveRecord</h1>

<p>fixtures
&ndash;  config.fixture_path = &ldquo;#{::Rails.root}/spec/fixtures&rdquo;
+  # config.fixture_path = &ldquo;#{::Rails.root}/spec/fixtures&rdquo;</p>

<h1>If you&rsquo;re not using ActiveRecord, or you&rsquo;d prefer not to run each of</h1>

<p>your</p>

<h1>examples within a transaction, remove the following line or assign</h1>

<p>false</p>

<h1>instead of true.</h1>

<ul>
<li>config.use_transactional_fixtures = true</li>
<li><h1>config.use_transactional_fixtures = true</h1>

<p>```</p></li>
</ul>


<h2>Installing Cucumber gem</h2>

<p>Again we add the dependency:
<code>
+  group :test do
+    gem 'cucumber-rails', :require =&gt; false
+    gem 'database_cleaner'
+  end
</code></p>

<p>And the command to install it:
<code>
rails generate cucumber:install
</code></p>

<p>Since we are using MongoID and not ActiveRecord, you need to change the database cleaner strategy from transaction to truncation in features/support/env.rb:</p>

<p><code>
-  DatabaseCleaner.strategy = :transaction
+  DatabaseCleaner.strategy = :truncation
</code></p>

<h2>Let’s create some entities</h2>

<p>To show the impact of these gems in a standar generate command, let see what has changed.</p>

<p><code>
rails generate scaffold product name description price:float
</code>
<code>
invoke  mongoid
create    app/models/product.rb
invoke  resource_route
route    resources :products
invoke  jbuilder_scaffold_controller
create    app/controllers/products_controller.rb
invoke    slim
create      app/views/products
create      app/views/products/index.html.slim
create      app/views/products/edit.html.slim
create      app/views/products/show.html.slim
create      app/views/products/new.html.slim
create      app/views/products/_form.html.slim
invoke    helper
create      app/helpers/products_helper.rb
invoke    jbuilder
exist      app/views/products
create      app/views/products/index.json.jbuilder
create      app/views/products/show.json.jbuilder
invoke  assets
invoke    coffee
create      app/assets/javascripts/products.js.coffee
invoke    scss
create      app/assets/stylesheets/products.css.scss
invoke  scss
create    app/assets/stylesheets/scaffolds.css.scss
</code></p>

<p>This is the command output, let’s see what has changed from the default one:</p>

<ul>
<li><strong>views</strong>: We are invoking slim so we are generating slim extension instead of erb.</li>
<li><strong>db</strong>: We are not generating migrations. Since MongoDB is a schemaless database, we don’t need to create tables.</li>
<li><strong>model</strong>: We are invoking mongoid now, so we are creating models prepared to work with Mongo:
```</li>
<li>class Product</li>
<li> include Mongoid::Document</li>
<li> field :name, type: String</li>
<li> field :description, type: String</li>
<li> field :price, type: Float</li>
<li>end
```</li>
</ul>


<h2>Resources:</h2>

<ul>
<li><a href="http://stackoverflow.com/questions/15512683/comparability-issue-rails-4-beta-ruby-2-0-0-mongoid">http://stackoverflow.com/questions/15512683/comparability-issue-rails-4-beta-ruby-2-0-0-mongoid</a></li>
<li><a href="http://github.com/ezilocchi/rails_with_mongo_example">http://github.com/ezilocchi/rails_with_mongo_example</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
